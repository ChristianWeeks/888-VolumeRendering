# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_voyager', [dirname(__file__)])
        except ImportError:
            import _voyager
            return _voyager
        if fp is not None:
            try:
                _mod = imp.load_module('_voyager', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _voyager = swig_import_helper()
    del swig_import_helper
else:
    import _voyager
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _voyager.SHARED_PTR_DISOWN
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _voyager.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _voyager.SwigPyIterator_value(self)
    def incr(self, n=1): return _voyager.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _voyager.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _voyager.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _voyager.SwigPyIterator_equal(self, *args)
    def copy(self): return _voyager.SwigPyIterator_copy(self)
    def next(self): return _voyager.SwigPyIterator_next(self)
    def __next__(self): return _voyager.SwigPyIterator___next__(self)
    def previous(self): return _voyager.SwigPyIterator_previous(self)
    def advance(self, *args): return _voyager.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _voyager.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _voyager.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _voyager.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _voyager.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _voyager.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _voyager.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _voyager.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Vector
    __del__ = lambda self : None;
    def set(self, *args): return _voyager.Vector_set(self, *args)
    def __sub__(self, *args): return _voyager.Vector___sub__(self, *args)
    def __add__(self, *args): return _voyager.Vector___add__(self, *args)
    def __div__(self, *args): return _voyager.Vector___div__(self, *args)
    def __mul__(self, *args): return _voyager.Vector___mul__(self, *args)
    def __xor__(self, *args): return _voyager.Vector___xor__(self, *args)
    def __iadd__(self, *args): return _voyager.Vector___iadd__(self, *args)
    def __isub__(self, *args): return _voyager.Vector___isub__(self, *args)
    def __imul__(self, *args): return _voyager.Vector___imul__(self, *args)
    def __idiv__(self, *args): return _voyager.Vector___idiv__(self, *args)
    def __call__(self, *args): return _voyager.Vector___call__(self, *args)
    def X(self): return _voyager.Vector_X(self)
    def Y(self): return _voyager.Vector_Y(self)
    def Z(self): return _voyager.Vector_Z(self)
    def magnitude(self): return _voyager.Vector_magnitude(self)
    def unitvector(self): return _voyager.Vector_unitvector(self)
    def normalize(self): return _voyager.Vector_normalize(self)
    def __eq__(self, *args): return _voyager.Vector___eq__(self, *args)
    def __ne__(self, *args): return _voyager.Vector___ne__(self, *args)
    def __lt__(self, *args): return _voyager.Vector___lt__(self, *args)
    def __le__(self, *args): return _voyager.Vector___le__(self, *args)
    def __gt__(self, *args): return _voyager.Vector___gt__(self, *args)
    def __ge__(self, *args): return _voyager.Vector___ge__(self, *args)
Vector_swigregister = _voyager.Vector_swigregister
Vector_swigregister(Vector)

class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_Matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Matrix
    __del__ = lambda self : None;
    def __call__(self, *args): return _voyager.Matrix___call__(self, *args)
    def __add__(self, *args): return _voyager.Matrix___add__(self, *args)
    def __sub__(self, *args): return _voyager.Matrix___sub__(self, *args)
    def __div__(self, *args): return _voyager.Matrix___div__(self, *args)
    def __mul__(self, *args): return _voyager.Matrix___mul__(self, *args)
    def __iadd__(self, *args): return _voyager.Matrix___iadd__(self, *args)
    def __isub__(self, *args): return _voyager.Matrix___isub__(self, *args)
    def __imul__(self, *args): return _voyager.Matrix___imul__(self, *args)
    def __idiv__(self, *args): return _voyager.Matrix___idiv__(self, *args)
    def __eq__(self, *args): return _voyager.Matrix___eq__(self, *args)
    def __ne__(self, *args): return _voyager.Matrix___ne__(self, *args)
    def __lt__(self, *args): return _voyager.Matrix___lt__(self, *args)
    def __le__(self, *args): return _voyager.Matrix___le__(self, *args)
    def __gt__(self, *args): return _voyager.Matrix___gt__(self, *args)
    def __ge__(self, *args): return _voyager.Matrix___ge__(self, *args)
    def inverse(self): return _voyager.Matrix_inverse(self)
    def transpose(self): return _voyager.Matrix_transpose(self)
    def det(self): return _voyager.Matrix_det(self)
    def trace(self): return _voyager.Matrix_trace(self)
    def exp(self): return _voyager.Matrix_exp(self)
    def Get(self, *args): return _voyager.Matrix_Get(self, *args)
    def Set(self, *args): return _voyager.Matrix_Set(self, *args)
Matrix_swigregister = _voyager.Matrix_swigregister
Matrix_swigregister(Matrix)


def __sub__(*args):
  return _voyager.__sub__(*args)
__sub__ = _voyager.__sub__

def __mul__(*args):
  return _voyager.__mul__(*args)
__mul__ = _voyager.__mul__
class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Color
    __del__ = lambda self : None;
    def set(self, *args): return _voyager.Color_set(self, *args)
    def clamp(self): return _voyager.Color_clamp(self)
    def __add__(self, *args): return _voyager.Color___add__(self, *args)
    def __sub__(self, *args): return _voyager.Color___sub__(self, *args)
    def __div__(self, *args): return _voyager.Color___div__(self, *args)
    def __mul__(self, *args): return _voyager.Color___mul__(self, *args)
    def __iadd__(self, *args): return _voyager.Color___iadd__(self, *args)
    def __isub__(self, *args): return _voyager.Color___isub__(self, *args)
    def __imul__(self, *args): return _voyager.Color___imul__(self, *args)
    def __idiv__(self, *args): return _voyager.Color___idiv__(self, *args)
    def __call__(self, *args): return _voyager.Color___call__(self, *args)
    def X(self): return _voyager.Color_X(self)
    def Y(self): return _voyager.Color_Y(self)
    def Z(self): return _voyager.Color_Z(self)
    def W(self): return _voyager.Color_W(self)
    def __eq__(self, *args): return _voyager.Color___eq__(self, *args)
    def __ne__(self, *args): return _voyager.Color___ne__(self, *args)
Color_swigregister = _voyager.Color_swigregister
Color_swigregister(Color)


def __lshift__(*args):
  return _voyager.__lshift__(*args)
__lshift__ = _voyager.__lshift__
class Camera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _voyager.new_Camera()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Camera
    __del__ = lambda self : None;
    def setEyeViewUp(self, *args): return _voyager.Camera_setEyeViewUp(self, *args)
    def eye(self): return _voyager.Camera_eye(self)
    def up(self): return _voyager.Camera_up(self)
    def view(self, *args): return _voyager.Camera_view(self, *args)
    def setFov(self, *args): return _voyager.Camera_setFov(self, *args)
    def fov(self): return _voyager.Camera_fov(self)
    def setAspectRatio(self, *args): return _voyager.Camera_setAspectRatio(self, *args)
    def aspectRatio(self): return _voyager.Camera_aspectRatio(self)
    def setNearPlane(self, *args): return _voyager.Camera_setNearPlane(self, *args)
    def nearPlane(self): return _voyager.Camera_nearPlane(self)
    def setFarPlane(self, *args): return _voyager.Camera_setFarPlane(self, *args)
    def farPlane(self): return _voyager.Camera_farPlane(self)
Camera_swigregister = _voyager.Camera_swigregister
Camera_swigregister(Camera)


def octave_noise_2d(*args):
  return _voyager.octave_noise_2d(*args)
octave_noise_2d = _voyager.octave_noise_2d

def octave_noise_3d(*args):
  return _voyager.octave_noise_3d(*args)
octave_noise_3d = _voyager.octave_noise_3d

def octave_noise_4d(*args):
  return _voyager.octave_noise_4d(*args)
octave_noise_4d = _voyager.octave_noise_4d

def scaled_octave_noise_2d(*args):
  return _voyager.scaled_octave_noise_2d(*args)
scaled_octave_noise_2d = _voyager.scaled_octave_noise_2d

def scaled_octave_noise_3d(*args):
  return _voyager.scaled_octave_noise_3d(*args)
scaled_octave_noise_3d = _voyager.scaled_octave_noise_3d

def scaled_octave_noise_4d(*args):
  return _voyager.scaled_octave_noise_4d(*args)
scaled_octave_noise_4d = _voyager.scaled_octave_noise_4d

def scaled_raw_noise_2d(*args):
  return _voyager.scaled_raw_noise_2d(*args)
scaled_raw_noise_2d = _voyager.scaled_raw_noise_2d

def scaled_raw_noise_3d(*args):
  return _voyager.scaled_raw_noise_3d(*args)
scaled_raw_noise_3d = _voyager.scaled_raw_noise_3d

def scaled_raw_noise_4d(*args):
  return _voyager.scaled_raw_noise_4d(*args)
scaled_raw_noise_4d = _voyager.scaled_raw_noise_4d

def raw_noise_2d(*args):
  return _voyager.raw_noise_2d(*args)
raw_noise_2d = _voyager.raw_noise_2d

def raw_noise_3d(*args):
  return _voyager.raw_noise_3d(*args)
raw_noise_3d = _voyager.raw_noise_3d

def raw_noise_4d(*args):
  return _voyager.raw_noise_4d(*args)
raw_noise_4d = _voyager.raw_noise_4d

def fastfloor(*args):
  return _voyager.fastfloor(*args)
fastfloor = _voyager.fastfloor

def dot(*args):
  return _voyager.dot(*args)
dot = _voyager.dot
class SimplexNoiseObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimplexNoiseObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimplexNoiseObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SimplexNoiseObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SimplexNoiseObject
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.SimplexNoiseObject_eval(self, *args)
    def getAnnotation(self): return _voyager.SimplexNoiseObject_getAnnotation(self)
SimplexNoiseObject_swigregister = _voyager.SimplexNoiseObject_swigregister
SimplexNoiseObject_swigregister(SimplexNoiseObject)
cvar = _voyager.cvar
grad3 = cvar.grad3
grad4 = cvar.grad4
perm = cvar.perm
simplex = cvar.simplex

class FloatVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVolume, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _voyager.new_FloatVolume()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_FloatVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.FloatVolume_eval(self, *args)
    def grad(self, *args): return _voyager.FloatVolume_grad(self, *args)
FloatVolume_swigregister = _voyager.FloatVolume_swigregister
FloatVolume_swigregister(FloatVolume)

class VectorVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVolume, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _voyager.new_VectorVolume()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_VectorVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.VectorVolume_eval(self, *args)
    def grad(self, *args): return _voyager.VectorVolume_grad(self, *args)
VectorVolume_swigregister = _voyager.VectorVolume_swigregister
VectorVolume_swigregister(VectorVolume)

class ColorVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorVolume, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _voyager.new_ColorVolume()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_ColorVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.ColorVolume_eval(self, *args)
    def grad(self, *args): return _voyager.ColorVolume_grad(self, *args)
ColorVolume_swigregister = _voyager.ColorVolume_swigregister
ColorVolume_swigregister(ColorVolume)

class FloatVolumeBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVolumeBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVolumeBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_FloatVolumeBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_FloatVolumeBase
    __del__ = lambda self : None;
    def get(self): return _voyager.FloatVolumeBase_get(self)
    __swig_setmethods__["BB"] = _voyager.FloatVolumeBase_BB_set
    __swig_getmethods__["BB"] = _voyager.FloatVolumeBase_BB_get
    if _newclass:BB = _swig_property(_voyager.FloatVolumeBase_BB_get, _voyager.FloatVolumeBase_BB_set)
FloatVolumeBase_swigregister = _voyager.FloatVolumeBase_swigregister
FloatVolumeBase_swigregister(FloatVolumeBase)

class VectorVolumeBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVolumeBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVolumeBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_VectorVolumeBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_VectorVolumeBase
    __del__ = lambda self : None;
    def get(self): return _voyager.VectorVolumeBase_get(self)
    __swig_setmethods__["BB"] = _voyager.VectorVolumeBase_BB_set
    __swig_getmethods__["BB"] = _voyager.VectorVolumeBase_BB_get
    if _newclass:BB = _swig_property(_voyager.VectorVolumeBase_BB_get, _voyager.VectorVolumeBase_BB_set)
VectorVolumeBase_swigregister = _voyager.VectorVolumeBase_swigregister
VectorVolumeBase_swigregister(VectorVolumeBase)

class ColorVolumeBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorVolumeBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorVolumeBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_ColorVolumeBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_ColorVolumeBase
    __del__ = lambda self : None;
ColorVolumeBase_swigregister = _voyager.ColorVolumeBase_swigregister
ColorVolumeBase_swigregister(ColorVolumeBase)

class ConstantVolumef(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantVolumef, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantVolumef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_ConstantVolumef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_ConstantVolumef
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.ConstantVolumef_eval(self, *args)
    def grad(self, *args): return _voyager.ConstantVolumef_grad(self, *args)
ConstantVolumef_swigregister = _voyager.ConstantVolumef_swigregister
ConstantVolumef_swigregister(ConstantVolumef)

class SphereVolume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphereVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphereVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SphereVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SphereVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.SphereVolume_eval(self, *args)
    def grad(self, *args): return _voyager.SphereVolume_grad(self, *args)
SphereVolume_swigregister = _voyager.SphereVolume_swigregister
SphereVolume_swigregister(SphereVolume)

class PyroSphereVolume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyroSphereVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyroSphereVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_PyroSphereVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_PyroSphereVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.PyroSphereVolume_eval(self, *args)
    def grad(self, *args): return _voyager.PyroSphereVolume_grad(self, *args)
PyroSphereVolume_swigregister = _voyager.PyroSphereVolume_swigregister
PyroSphereVolume_swigregister(PyroSphereVolume)

class SimplexNoiseVolume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimplexNoiseVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimplexNoiseVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SimplexNoiseVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SimplexNoiseVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.SimplexNoiseVolume_eval(self, *args)
    def grad(self, *args): return _voyager.SimplexNoiseVolume_grad(self, *args)
SimplexNoiseVolume_swigregister = _voyager.SimplexNoiseVolume_swigregister
SimplexNoiseVolume_swigregister(SimplexNoiseVolume)

class SimplexNoiseVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimplexNoiseVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimplexNoiseVectorVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SimplexNoiseVectorVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SimplexNoiseVectorVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.SimplexNoiseVectorVolume_eval(self, *args)
    def grad(self, *args): return _voyager.SimplexNoiseVectorVolume_grad(self, *args)
SimplexNoiseVectorVolume_swigregister = _voyager.SimplexNoiseVectorVolume_swigregister
SimplexNoiseVectorVolume_swigregister(SimplexNoiseVectorVolume)

class SimplexNoiseColorVolume(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimplexNoiseColorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimplexNoiseColorVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SimplexNoiseColorVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SimplexNoiseColorVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.SimplexNoiseColorVolume_eval(self, *args)
    def grad(self, *args): return _voyager.SimplexNoiseColorVolume_grad(self, *args)
SimplexNoiseColorVolume_swigregister = _voyager.SimplexNoiseColorVolume_swigregister
SimplexNoiseColorVolume_swigregister(SimplexNoiseColorVolume)

class BoxVolume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoxVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_BoxVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_BoxVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.BoxVolume_eval(self, *args)
    def grad(self, *args): return _voyager.BoxVolume_grad(self, *args)
BoxVolume_swigregister = _voyager.BoxVolume_swigregister
BoxVolume_swigregister(BoxVolume)

class CylinderVolume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CylinderVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CylinderVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_CylinderVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_CylinderVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.CylinderVolume_eval(self, *args)
    def grad(self, *args): return _voyager.CylinderVolume_grad(self, *args)
CylinderVolume_swigregister = _voyager.CylinderVolume_swigregister
CylinderVolume_swigregister(CylinderVolume)

class PlaneVolume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlaneVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlaneVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_PlaneVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_PlaneVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.PlaneVolume_eval(self, *args)
    def grad(self, *args): return _voyager.PlaneVolume_grad(self, *args)
PlaneVolume_swigregister = _voyager.PlaneVolume_swigregister
PlaneVolume_swigregister(PlaneVolume)

class ConeVolume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConeVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConeVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_ConeVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_ConeVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.ConeVolume_eval(self, *args)
    def grad(self, *args): return _voyager.ConeVolume_grad(self, *args)
ConeVolume_swigregister = _voyager.ConeVolume_swigregister
ConeVolume_swigregister(ConeVolume)

class ColorSlider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorSlider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorSlider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_ColorSlider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_ColorSlider
    __del__ = lambda self : None;
    def addColor(self, *args): return _voyager.ColorSlider_addColor(self, *args)
    def getColor(self, *args): return _voyager.ColorSlider_getColor(self, *args)
    __swig_setmethods__["anchors"] = _voyager.ColorSlider_anchors_set
    __swig_getmethods__["anchors"] = _voyager.ColorSlider_anchors_get
    if _newclass:anchors = _swig_property(_voyager.ColorSlider_anchors_get, _voyager.ColorSlider_anchors_set)
    __swig_setmethods__["colors"] = _voyager.ColorSlider_colors_set
    __swig_getmethods__["colors"] = _voyager.ColorSlider_colors_get
    if _newclass:colors = _swig_property(_voyager.ColorSlider_colors_get, _voyager.ColorSlider_colors_set)
ColorSlider_swigregister = _voyager.ColorSlider_swigregister
ColorSlider_swigregister(ColorSlider)

class AddVolumef(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddVolumef, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AddVolumef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_AddVolumef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_AddVolumef
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.AddVolumef_eval(self, *args)
    def grad(self, *args): return _voyager.AddVolumef_grad(self, *args)
AddVolumef_swigregister = _voyager.AddVolumef_swigregister
AddVolumef_swigregister(AddVolumef)

class AddVolumev(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddVolumev, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AddVolumev, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_AddVolumev(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_AddVolumev
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.AddVolumev_eval(self, *args)
    def grad(self, *args): return _voyager.AddVolumev_grad(self, *args)
AddVolumev_swigregister = _voyager.AddVolumev_swigregister
AddVolumev_swigregister(AddVolumev)

class SubtractVolumef(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubtractVolumef, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubtractVolumef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SubtractVolumef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SubtractVolumef
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.SubtractVolumef_eval(self, *args)
    def grad(self, *args): return _voyager.SubtractVolumef_grad(self, *args)
SubtractVolumef_swigregister = _voyager.SubtractVolumef_swigregister
SubtractVolumef_swigregister(SubtractVolumef)

class SubtractVolumev(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubtractVolumev, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubtractVolumev, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SubtractVolumev(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SubtractVolumev
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.SubtractVolumev_eval(self, *args)
    def grad(self, *args): return _voyager.SubtractVolumev_grad(self, *args)
SubtractVolumev_swigregister = _voyager.SubtractVolumev_swigregister
SubtractVolumev_swigregister(SubtractVolumev)

class MultVolumef(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultVolumef, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultVolumef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_MultVolumef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_MultVolumef
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.MultVolumef_eval(self, *args)
    def grad(self, *args): return _voyager.MultVolumef_grad(self, *args)
MultVolumef_swigregister = _voyager.MultVolumef_swigregister
MultVolumef_swigregister(MultVolumef)

class ColorVolumeFromDensity(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorVolumeFromDensity, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorVolumeFromDensity, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_ColorVolumeFromDensity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_ColorVolumeFromDensity
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.ColorVolumeFromDensity_eval(self, *args)
    def grad(self, *args): return _voyager.ColorVolumeFromDensity_grad(self, *args)
ColorVolumeFromDensity_swigregister = _voyager.ColorVolumeFromDensity_swigregister
ColorVolumeFromDensity_swigregister(ColorVolumeFromDensity)

class Mult_SV_Volume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mult_SV_Volume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mult_SV_Volume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_Mult_SV_Volume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Mult_SV_Volume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.Mult_SV_Volume_eval(self, *args)
    def grad(self, *args): return _voyager.Mult_SV_Volume_grad(self, *args)
Mult_SV_Volume_swigregister = _voyager.Mult_SV_Volume_swigregister
Mult_SV_Volume_swigregister(Mult_SV_Volume)

class Advect_SL_Volume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Advect_SL_Volume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Advect_SL_Volume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_Advect_SL_Volume(*args)
        try: self.this.append(this)
        except: self.this = this
    def eval(self, *args): return _voyager.Advect_SL_Volume_eval(self, *args)
    def grad(self, *args): return _voyager.Advect_SL_Volume_grad(self, *args)
    __swig_setmethods__["advectTime"] = _voyager.Advect_SL_Volume_advectTime_set
    __swig_getmethods__["advectTime"] = _voyager.Advect_SL_Volume_advectTime_get
    if _newclass:advectTime = _swig_property(_voyager.Advect_SL_Volume_advectTime_get, _voyager.Advect_SL_Volume_advectTime_set)
    __swig_destroy__ = _voyager.delete_Advect_SL_Volume
    __del__ = lambda self : None;
Advect_SL_Volume_swigregister = _voyager.Advect_SL_Volume_swigregister
Advect_SL_Volume_swigregister(Advect_SL_Volume)

class Advect_MMC_Volume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Advect_MMC_Volume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Advect_MMC_Volume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_Advect_MMC_Volume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Advect_MMC_Volume
    __del__ = lambda self : None;
    def setTime(self, *args): return _voyager.Advect_MMC_Volume_setTime(self, *args)
    def eval(self, *args): return _voyager.Advect_MMC_Volume_eval(self, *args)
    def grad(self, *args): return _voyager.Advect_MMC_Volume_grad(self, *args)
Advect_MMC_Volume_swigregister = _voyager.Advect_MMC_Volume_swigregister
Advect_MMC_Volume_swigregister(Advect_MMC_Volume)

class DivideVolume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DivideVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DivideVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_DivideVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_DivideVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.DivideVolume_eval(self, *args)
    def grad(self, *args): return _voyager.DivideVolume_grad(self, *args)
DivideVolume_swigregister = _voyager.DivideVolume_swigregister
DivideVolume_swigregister(DivideVolume)

class Divide_SV_Volume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Divide_SV_Volume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Divide_SV_Volume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_Divide_SV_Volume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Divide_SV_Volume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.Divide_SV_Volume_eval(self, *args)
    def grad(self, *args): return _voyager.Divide_SV_Volume_grad(self, *args)
Divide_SV_Volume_swigregister = _voyager.Divide_SV_Volume_swigregister
Divide_SV_Volume_swigregister(Divide_SV_Volume)

class ExpVolumef(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpVolumef, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpVolumef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_ExpVolumef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_ExpVolumef
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.ExpVolumef_eval(self, *args)
    def grad(self, *args): return _voyager.ExpVolumef_grad(self, *args)
ExpVolumef_swigregister = _voyager.ExpVolumef_swigregister
ExpVolumef_swigregister(ExpVolumef)

class ExpVolumev(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpVolumev, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpVolumev, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_ExpVolumev(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_ExpVolumev
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.ExpVolumev_eval(self, *args)
    def grad(self, *args): return _voyager.ExpVolumev_grad(self, *args)
ExpVolumev_swigregister = _voyager.ExpVolumev_swigregister
ExpVolumev_swigregister(ExpVolumev)

class UnionVolumef(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnionVolumef, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnionVolumef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_UnionVolumef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_UnionVolumef
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.UnionVolumef_eval(self, *args)
    def grad(self, *args): return _voyager.UnionVolumef_grad(self, *args)
UnionVolumef_swigregister = _voyager.UnionVolumef_swigregister
UnionVolumef_swigregister(UnionVolumef)

class UnionVolumev(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnionVolumev, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnionVolumev, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_UnionVolumev(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_UnionVolumev
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.UnionVolumev_eval(self, *args)
    def grad(self, *args): return _voyager.UnionVolumev_grad(self, *args)
UnionVolumev_swigregister = _voyager.UnionVolumev_swigregister
UnionVolumev_swigregister(UnionVolumev)

class IntersectVolumef(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntersectVolumef, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntersectVolumef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_IntersectVolumef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_IntersectVolumef
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.IntersectVolumef_eval(self, *args)
    def grad(self, *args): return _voyager.IntersectVolumef_grad(self, *args)
IntersectVolumef_swigregister = _voyager.IntersectVolumef_swigregister
IntersectVolumef_swigregister(IntersectVolumef)

class IntersectVolumev(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntersectVolumev, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntersectVolumev, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_IntersectVolumev(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_IntersectVolumev
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.IntersectVolumev_eval(self, *args)
    def grad(self, *args): return _voyager.IntersectVolumev_grad(self, *args)
IntersectVolumev_swigregister = _voyager.IntersectVolumev_swigregister
IntersectVolumev_swigregister(IntersectVolumev)

class CutoutVolumef(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CutoutVolumef, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CutoutVolumef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_CutoutVolumef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_CutoutVolumef
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.CutoutVolumef_eval(self, *args)
    def grad(self, *args): return _voyager.CutoutVolumef_grad(self, *args)
CutoutVolumef_swigregister = _voyager.CutoutVolumef_swigregister
CutoutVolumef_swigregister(CutoutVolumef)

class CutoutVolumev(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CutoutVolumev, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CutoutVolumev, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_CutoutVolumev(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_CutoutVolumev
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.CutoutVolumev_eval(self, *args)
    def grad(self, *args): return _voyager.CutoutVolumev_grad(self, *args)
CutoutVolumev_swigregister = _voyager.CutoutVolumev_swigregister
CutoutVolumev_swigregister(CutoutVolumev)

class SinVolume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SinVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SinVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SinVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SinVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.SinVolume_eval(self, *args)
    def grad(self, *args): return _voyager.SinVolume_grad(self, *args)
SinVolume_swigregister = _voyager.SinVolume_swigregister
SinVolume_swigregister(SinVolume)

class CosVolume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CosVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CosVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_CosVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_CosVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.CosVolume_eval(self, *args)
    def grad(self, *args): return _voyager.CosVolume_grad(self, *args)
CosVolume_swigregister = _voyager.CosVolume_swigregister
CosVolume_swigregister(CosVolume)

class DotProductVolume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DotProductVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DotProductVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_DotProductVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_DotProductVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.DotProductVolume_eval(self, *args)
    def grad(self, *args): return _voyager.DotProductVolume_grad(self, *args)
DotProductVolume_swigregister = _voyager.DotProductVolume_swigregister
DotProductVolume_swigregister(DotProductVolume)

class CrossProductVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossProductVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrossProductVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_CrossProductVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_CrossProductVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.CrossProductVolume_eval(self, *args)
    def grad(self, *args): return _voyager.CrossProductVolume_grad(self, *args)
CrossProductVolume_swigregister = _voyager.CrossProductVolume_swigregister
CrossProductVolume_swigregister(CrossProductVolume)

class TranslateVolumef(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslateVolumef, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TranslateVolumef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_TranslateVolumef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_TranslateVolumef
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.TranslateVolumef_eval(self, *args)
    def grad(self, *args): return _voyager.TranslateVolumef_grad(self, *args)
TranslateVolumef_swigregister = _voyager.TranslateVolumef_swigregister
TranslateVolumef_swigregister(TranslateVolumef)

class TranslateVolumev(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslateVolumev, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TranslateVolumev, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_TranslateVolumev(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_TranslateVolumev
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.TranslateVolumev_eval(self, *args)
    def grad(self, *args): return _voyager.TranslateVolumev_grad(self, *args)
TranslateVolumev_swigregister = _voyager.TranslateVolumev_swigregister
TranslateVolumev_swigregister(TranslateVolumev)

class Scale_S_Volume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scale_S_Volume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scale_S_Volume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_Scale_S_Volume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Scale_S_Volume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.Scale_S_Volume_eval(self, *args)
    def grad(self, *args): return _voyager.Scale_S_Volume_grad(self, *args)
Scale_S_Volume_swigregister = _voyager.Scale_S_Volume_swigregister
Scale_S_Volume_swigregister(Scale_S_Volume)

class Scale_V_Volume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scale_V_Volume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scale_V_Volume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_Scale_V_Volume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Scale_V_Volume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.Scale_V_Volume_eval(self, *args)
    def grad(self, *args): return _voyager.Scale_V_Volume_grad(self, *args)
Scale_V_Volume_swigregister = _voyager.Scale_V_Volume_swigregister
Scale_V_Volume_swigregister(Scale_V_Volume)

class Rotate_S_Volume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rotate_S_Volume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rotate_S_Volume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_Rotate_S_Volume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Rotate_S_Volume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.Rotate_S_Volume_eval(self, *args)
    def grad(self, *args): return _voyager.Rotate_S_Volume_grad(self, *args)
Rotate_S_Volume_swigregister = _voyager.Rotate_S_Volume_swigregister
Rotate_S_Volume_swigregister(Rotate_S_Volume)

class BlinnBlend_S_Volume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlinnBlend_S_Volume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlinnBlend_S_Volume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_BlinnBlend_S_Volume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_BlinnBlend_S_Volume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.BlinnBlend_S_Volume_eval(self, *args)
    def grad(self, *args): return _voyager.BlinnBlend_S_Volume_grad(self, *args)
BlinnBlend_S_Volume_swigregister = _voyager.BlinnBlend_S_Volume_swigregister
BlinnBlend_S_Volume_swigregister(BlinnBlend_S_Volume)

class MaskVolume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaskVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaskVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_MaskVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_MaskVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.MaskVolume_eval(self, *args)
    def grad(self, *args): return _voyager.MaskVolume_grad(self, *args)
MaskVolume_swigregister = _voyager.MaskVolume_swigregister
MaskVolume_swigregister(MaskVolume)

class ClampVolume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClampVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClampVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_ClampVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_ClampVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.ClampVolume_eval(self, *args)
    def grad(self, *args): return _voyager.ClampVolume_grad(self, *args)
ClampVolume_swigregister = _voyager.ClampVolume_swigregister
ClampVolume_swigregister(ClampVolume)

class light(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, light, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, light, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_light(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_light
    __del__ = lambda self : None;
    def getColor(self, *args): return _voyager.light_getColor(self, *args)
    __swig_setmethods__["c"] = _voyager.light_c_set
    __swig_getmethods__["c"] = _voyager.light_c_get
    if _newclass:c = _swig_property(_voyager.light_c_get, _voyager.light_c_set)
    __swig_setmethods__["dir"] = _voyager.light_dir_set
    __swig_getmethods__["dir"] = _voyager.light_dir_get
    if _newclass:dir = _swig_property(_voyager.light_dir_get, _voyager.light_dir_set)
    __swig_setmethods__["pos"] = _voyager.light_pos_set
    __swig_getmethods__["pos"] = _voyager.light_pos_get
    if _newclass:pos = _swig_property(_voyager.light_pos_get, _voyager.light_pos_set)
    __swig_setmethods__["intensity"] = _voyager.light_intensity_set
    __swig_getmethods__["intensity"] = _voyager.light_intensity_get
    if _newclass:intensity = _swig_property(_voyager.light_intensity_get, _voyager.light_intensity_set)
    __swig_setmethods__["USE_SLIDER"] = _voyager.light_USE_SLIDER_set
    __swig_getmethods__["USE_SLIDER"] = _voyager.light_USE_SLIDER_get
    if _newclass:USE_SLIDER = _swig_property(_voyager.light_USE_SLIDER_get, _voyager.light_USE_SLIDER_set)
    __swig_setmethods__["cSlider"] = _voyager.light_cSlider_set
    __swig_getmethods__["cSlider"] = _voyager.light_cSlider_get
    if _newclass:cSlider = _swig_property(_voyager.light_cSlider_get, _voyager.light_cSlider_set)
light_swigregister = _voyager.light_swigregister
light_swigregister(light)

class Grid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Grid, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _voyager.delete_Grid
    __del__ = lambda self : None;
    def setDefaultValue(self, *args): return _voyager.Grid_setDefaultValue(self, *args)
    def get(self, *args): return _voyager.Grid_get(self, *args)
    def set(self, *args): return _voyager.Grid_set(self, *args)
    def getData(self): return _voyager.Grid_getData(self)
    __swig_getmethods__["partitionSize"] = _voyager.Grid_partitionSize_get
    if _newclass:partitionSize = _swig_property(_voyager.Grid_partitionSize_get)
Grid_swigregister = _voyager.Grid_swigregister
Grid_swigregister(Grid)

class DenseGrid(Grid):
    __swig_setmethods__ = {}
    for _s in [Grid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DenseGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [Grid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DenseGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_DenseGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_DenseGrid
    __del__ = lambda self : None;
    def getData(self): return _voyager.DenseGrid_getData(self)
    def get(self, *args): return _voyager.DenseGrid_get(self, *args)
    def set(self, *args): return _voyager.DenseGrid_set(self, *args)
DenseGrid_swigregister = _voyager.DenseGrid_swigregister
DenseGrid_swigregister(DenseGrid)

class SparseGrid(Grid):
    __swig_setmethods__ = {}
    for _s in [Grid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [Grid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SparseGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SparseGrid
    __del__ = lambda self : None;
    def getData(self): return _voyager.SparseGrid_getData(self)
    def get(self, *args): return _voyager.SparseGrid_get(self, *args)
    def set(self, *args): return _voyager.SparseGrid_set(self, *args)
SparseGrid_swigregister = _voyager.SparseGrid_swigregister
SparseGrid_swigregister(SparseGrid)

class FloatGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_FloatGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_FloatGrid
    __del__ = lambda self : None;
    def trilinearInterpolate(self, *args): return _voyager.FloatGrid_trilinearInterpolate(self, *args)
    def StampWisp(self, *args): return _voyager.FloatGrid_StampWisp(self, *args)
    __swig_getmethods__["center"] = _voyager.FloatGrid_center_get
    if _newclass:center = _swig_property(_voyager.FloatGrid_center_get)
    __swig_getmethods__["length"] = _voyager.FloatGrid_length_get
    if _newclass:length = _swig_property(_voyager.FloatGrid_length_get)
FloatGrid_swigregister = _voyager.FloatGrid_swigregister
FloatGrid_swigregister(FloatGrid)

class FloatGridBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatGridBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatGridBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_FloatGridBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_FloatGridBase
    __del__ = lambda self : None;
    def getRef(self): return _voyager.FloatGridBase_getRef(self)
FloatGridBase_swigregister = _voyager.FloatGridBase_swigregister
FloatGridBase_swigregister(FloatGridBase)

class DensityGrid(FloatGrid):
    __swig_setmethods__ = {}
    for _s in [FloatGrid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DensityGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatGrid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DensityGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_DensityGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_DensityGrid
    __del__ = lambda self : None;
    def StampWisp(self, *args): return _voyager.DensityGrid_StampWisp(self, *args)
    def bakeDot(self, *args): return _voyager.DensityGrid_bakeDot(self, *args)
DensityGrid_swigregister = _voyager.DensityGrid_swigregister
DensityGrid_swigregister(DensityGrid)

class DeepShadowMap(FloatGrid):
    __swig_setmethods__ = {}
    for _s in [FloatGrid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeepShadowMap, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatGrid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeepShadowMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_DeepShadowMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_DeepShadowMap
    __del__ = lambda self : None;
    __swig_setmethods__["sourceLight"] = _voyager.DeepShadowMap_sourceLight_set
    __swig_getmethods__["sourceLight"] = _voyager.DeepShadowMap_sourceLight_get
    if _newclass:sourceLight = _swig_property(_voyager.DeepShadowMap_sourceLight_get, _voyager.DeepShadowMap_sourceLight_set)
DeepShadowMap_swigregister = _voyager.DeepShadowMap_swigregister
DeepShadowMap_swigregister(DeepShadowMap)

class DSMBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSMBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSMBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_DSMBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_DSMBase
    __del__ = lambda self : None;
DSMBase_swigregister = _voyager.DSMBase_swigregister
DSMBase_swigregister(DSMBase)

class GriddedVolume(FloatVolume):
    __swig_setmethods__ = {}
    for _s in [FloatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GriddedVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GriddedVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_GriddedVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_GriddedVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.GriddedVolume_eval(self, *args)
    def grad(self, *args): return _voyager.GriddedVolume_grad(self, *args)
GriddedVolume_swigregister = _voyager.GriddedVolume_swigregister
GriddedVolume_swigregister(GriddedVolume)


def Constantf(*args):
  return _voyager.Constantf(*args)
Constantf = _voyager.Constantf

def Sphere(*args):
  return _voyager.Sphere(*args)
Sphere = _voyager.Sphere

def Box(*args):
  return _voyager.Box(*args)
Box = _voyager.Box

def Cylinder(*args):
  return _voyager.Cylinder(*args)
Cylinder = _voyager.Cylinder

def Plane(*args):
  return _voyager.Plane(*args)
Plane = _voyager.Plane

def Cone(*args):
  return _voyager.Cone(*args)
Cone = _voyager.Cone

def Noisef(*args):
  return _voyager.Noisef(*args)
Noisef = _voyager.Noisef

def PyroSphere(*args):
  return _voyager.PyroSphere(*args)
PyroSphere = _voyager.PyroSphere

def Noisev(*args):
  return _voyager.Noisev(*args)
Noisev = _voyager.Noisev

def Noisec(*args):
  return _voyager.Noisec(*args)
Noisec = _voyager.Noisec

def Translatef(*args):
  return _voyager.Translatef(*args)
Translatef = _voyager.Translatef

def Translatev(*args):
  return _voyager.Translatev(*args)
Translatev = _voyager.Translatev

def Addf(*args):
  return _voyager.Addf(*args)
Addf = _voyager.Addf

def Subtractf(*args):
  return _voyager.Subtractf(*args)
Subtractf = _voyager.Subtractf

def Multf(*args):
  return _voyager.Multf(*args)
Multf = _voyager.Multf

def AdvectSLf(*args):
  return _voyager.AdvectSLf(*args)
AdvectSLf = _voyager.AdvectSLf

def AdvectMMCf(*args):
  return _voyager.AdvectMMCf(*args)
AdvectMMCf = _voyager.AdvectMMCf

def Unionf(*args):
  return _voyager.Unionf(*args)
Unionf = _voyager.Unionf

def Intersectf(*args):
  return _voyager.Intersectf(*args)
Intersectf = _voyager.Intersectf

def Cutoutf(*args):
  return _voyager.Cutoutf(*args)
Cutoutf = _voyager.Cutoutf

def Maskf(*args):
  return _voyager.Maskf(*args)
Maskf = _voyager.Maskf

def Clampf(*args):
  return _voyager.Clampf(*args)
Clampf = _voyager.Clampf

def Addv(*args):
  return _voyager.Addv(*args)
Addv = _voyager.Addv

def Subtractv(*args):
  return _voyager.Subtractv(*args)
Subtractv = _voyager.Subtractv

def ColorFromDensity(*args):
  return _voyager.ColorFromDensity(*args)
ColorFromDensity = _voyager.ColorFromDensity

def Gridf(*args):
  return _voyager.Gridf(*args)
Gridf = _voyager.Gridf

def GriddedVolf(*args):
  return _voyager.GriddedVolf(*args)
GriddedVolf = _voyager.GriddedVolf

def AutoGriddedf(*args):
  return _voyager.AutoGriddedf(*args)
AutoGriddedf = _voyager.AutoGriddedf

def DSM(*args):
  return _voyager.DSM(*args)
DSM = _voyager.DSM
class Ray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_Ray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["origin"] = _voyager.Ray_origin_set
    __swig_getmethods__["origin"] = _voyager.Ray_origin_get
    if _newclass:origin = _swig_property(_voyager.Ray_origin_get, _voyager.Ray_origin_set)
    __swig_setmethods__["direction"] = _voyager.Ray_direction_set
    __swig_getmethods__["direction"] = _voyager.Ray_direction_get
    if _newclass:direction = _swig_property(_voyager.Ray_direction_get, _voyager.Ray_direction_set)
    __swig_setmethods__["inv_direction"] = _voyager.Ray_inv_direction_set
    __swig_getmethods__["inv_direction"] = _voyager.Ray_inv_direction_get
    if _newclass:inv_direction = _swig_property(_voyager.Ray_inv_direction_get, _voyager.Ray_inv_direction_set)
    __swig_setmethods__["sign"] = _voyager.Ray_sign_set
    __swig_getmethods__["sign"] = _voyager.Ray_sign_get
    if _newclass:sign = _swig_property(_voyager.Ray_sign_get, _voyager.Ray_sign_set)
    __swig_destroy__ = _voyager.delete_Ray
    __del__ = lambda self : None;
Ray_swigregister = _voyager.Ray_swigregister
Ray_swigregister(Ray)

class BoundingBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_BoundingBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_BoundingBox
    __del__ = lambda self : None;
    def setBounds(self, *args): return _voyager.BoundingBox_setBounds(self, *args)
    def intersect(self, *args): return _voyager.BoundingBox_intersect(self, *args)
    __swig_setmethods__["bounds"] = _voyager.BoundingBox_bounds_set
    __swig_getmethods__["bounds"] = _voyager.BoundingBox_bounds_get
    if _newclass:bounds = _swig_property(_voyager.BoundingBox_bounds_get, _voyager.BoundingBox_bounds_set)
    __swig_setmethods__["center"] = _voyager.BoundingBox_center_set
    __swig_getmethods__["center"] = _voyager.BoundingBox_center_get
    if _newclass:center = _swig_property(_voyager.BoundingBox_center_get, _voyager.BoundingBox_center_set)
    __swig_setmethods__["len"] = _voyager.BoundingBox_len_set
    __swig_getmethods__["len"] = _voyager.BoundingBox_len_get
    if _newclass:len = _swig_property(_voyager.BoundingBox_len_get, _voyager.BoundingBox_len_set)
BoundingBox_swigregister = _voyager.BoundingBox_swigregister
BoundingBox_swigregister(BoundingBox)

class Image(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _voyager.new_Image()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Image
    __del__ = lambda self : None;
    def reset(self, *args): return _voyager.Image_reset(self, *args)
    def value(self, *args): return _voyager.Image_value(self, *args)
    def pixel(self, *args): return _voyager.Image_pixel(self, *args)
    def setPixel(self, *args): return _voyager.Image_setPixel(self, *args)
    def Width(self): return _voyager.Image_Width(self)
    def Height(self): return _voyager.Image_Height(self)
    def Depth(self): return _voyager.Image_Depth(self)
Image_swigregister = _voyager.Image_swigregister
Image_swigregister(Image)


def writeOIIOImage(*args):
  return _voyager.writeOIIOImage(*args)
writeOIIOImage = _voyager.writeOIIOImage

def readOIIOImage(*args):
  return _voyager.readOIIOImage(*args)
readOIIOImage = _voyager.readOIIOImage

def printMetadata(*args):
  return _voyager.printMetadata(*args)
printMetadata = _voyager.printMetadata

def convert(*args):
  return _voyager.convert(*args)
convert = _voyager.convert
class StringArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringArray, name)
    __repr__ = _swig_repr
    def iterator(self): return _voyager.StringArray_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _voyager.StringArray___nonzero__(self)
    def __bool__(self): return _voyager.StringArray___bool__(self)
    def __len__(self): return _voyager.StringArray___len__(self)
    def pop(self): return _voyager.StringArray_pop(self)
    def __getslice__(self, *args): return _voyager.StringArray___getslice__(self, *args)
    def __setslice__(self, *args): return _voyager.StringArray___setslice__(self, *args)
    def __delslice__(self, *args): return _voyager.StringArray___delslice__(self, *args)
    def __delitem__(self, *args): return _voyager.StringArray___delitem__(self, *args)
    def __getitem__(self, *args): return _voyager.StringArray___getitem__(self, *args)
    def __setitem__(self, *args): return _voyager.StringArray___setitem__(self, *args)
    def append(self, *args): return _voyager.StringArray_append(self, *args)
    def empty(self): return _voyager.StringArray_empty(self)
    def size(self): return _voyager.StringArray_size(self)
    def clear(self): return _voyager.StringArray_clear(self)
    def swap(self, *args): return _voyager.StringArray_swap(self, *args)
    def get_allocator(self): return _voyager.StringArray_get_allocator(self)
    def begin(self): return _voyager.StringArray_begin(self)
    def end(self): return _voyager.StringArray_end(self)
    def rbegin(self): return _voyager.StringArray_rbegin(self)
    def rend(self): return _voyager.StringArray_rend(self)
    def pop_back(self): return _voyager.StringArray_pop_back(self)
    def erase(self, *args): return _voyager.StringArray_erase(self, *args)
    def __init__(self, *args): 
        this = _voyager.new_StringArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _voyager.StringArray_push_back(self, *args)
    def front(self): return _voyager.StringArray_front(self)
    def back(self): return _voyager.StringArray_back(self)
    def assign(self, *args): return _voyager.StringArray_assign(self, *args)
    def resize(self, *args): return _voyager.StringArray_resize(self, *args)
    def insert(self, *args): return _voyager.StringArray_insert(self, *args)
    def reserve(self, *args): return _voyager.StringArray_reserve(self, *args)
    def capacity(self): return _voyager.StringArray_capacity(self)
    __swig_destroy__ = _voyager.delete_StringArray
    __del__ = lambda self : None;
StringArray_swigregister = _voyager.StringArray_swigregister
StringArray_swigregister(StringArray)

class RenderLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RenderLog, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _voyager.new_RenderLog()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_RenderLog
    __del__ = lambda self : None;
    def addLine(self, *args): return _voyager.RenderLog_addLine(self, *args)
    def addVector(self, *args): return _voyager.RenderLog_addVector(self, *args)
    def writeToImage(self, *args): return _voyager.RenderLog_writeToImage(self, *args)
    def writeToFile(self, *args): return _voyager.RenderLog_writeToFile(self, *args)
    def clearAnnotations(self): return _voyager.RenderLog_clearAnnotations(self)
    __swig_setmethods__["filepath"] = _voyager.RenderLog_filepath_set
    __swig_getmethods__["filepath"] = _voyager.RenderLog_filepath_get
    if _newclass:filepath = _swig_property(_voyager.RenderLog_filepath_get, _voyager.RenderLog_filepath_set)
    __swig_setmethods__["annotations"] = _voyager.RenderLog_annotations_set
    __swig_getmethods__["annotations"] = _voyager.RenderLog_annotations_get
    if _newclass:annotations = _swig_property(_voyager.RenderLog_annotations_get, _voyager.RenderLog_annotations_set)
RenderLog_swigregister = _voyager.RenderLog_swigregister
RenderLog_swigregister(RenderLog)

class WedgeAttribute(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WedgeAttribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WedgeAttribute, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _voyager.new_WedgeAttribute()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_WedgeAttribute
    __del__ = lambda self : None;
    def key(self, *args): return _voyager.WedgeAttribute_key(self, *args)
    def get(self, *args): return _voyager.WedgeAttribute_get(self, *args)
WedgeAttribute_swigregister = _voyager.WedgeAttribute_swigregister
WedgeAttribute_swigregister(WedgeAttribute)

class FloatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatArray, name)
    __repr__ = _swig_repr
    def iterator(self): return _voyager.FloatArray_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _voyager.FloatArray___nonzero__(self)
    def __bool__(self): return _voyager.FloatArray___bool__(self)
    def __len__(self): return _voyager.FloatArray___len__(self)
    def pop(self): return _voyager.FloatArray_pop(self)
    def __getslice__(self, *args): return _voyager.FloatArray___getslice__(self, *args)
    def __setslice__(self, *args): return _voyager.FloatArray___setslice__(self, *args)
    def __delslice__(self, *args): return _voyager.FloatArray___delslice__(self, *args)
    def __delitem__(self, *args): return _voyager.FloatArray___delitem__(self, *args)
    def __getitem__(self, *args): return _voyager.FloatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _voyager.FloatArray___setitem__(self, *args)
    def append(self, *args): return _voyager.FloatArray_append(self, *args)
    def empty(self): return _voyager.FloatArray_empty(self)
    def size(self): return _voyager.FloatArray_size(self)
    def clear(self): return _voyager.FloatArray_clear(self)
    def swap(self, *args): return _voyager.FloatArray_swap(self, *args)
    def get_allocator(self): return _voyager.FloatArray_get_allocator(self)
    def begin(self): return _voyager.FloatArray_begin(self)
    def end(self): return _voyager.FloatArray_end(self)
    def rbegin(self): return _voyager.FloatArray_rbegin(self)
    def rend(self): return _voyager.FloatArray_rend(self)
    def pop_back(self): return _voyager.FloatArray_pop_back(self)
    def erase(self, *args): return _voyager.FloatArray_erase(self, *args)
    def __init__(self, *args): 
        this = _voyager.new_FloatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _voyager.FloatArray_push_back(self, *args)
    def front(self): return _voyager.FloatArray_front(self)
    def back(self): return _voyager.FloatArray_back(self)
    def assign(self, *args): return _voyager.FloatArray_assign(self, *args)
    def resize(self, *args): return _voyager.FloatArray_resize(self, *args)
    def insert(self, *args): return _voyager.FloatArray_insert(self, *args)
    def reserve(self, *args): return _voyager.FloatArray_reserve(self, *args)
    def capacity(self): return _voyager.FloatArray_capacity(self)
    __swig_destroy__ = _voyager.delete_FloatArray
    __del__ = lambda self : None;
FloatArray_swigregister = _voyager.FloatArray_swigregister
FloatArray_swigregister(FloatArray)

class DoubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleArray, name)
    __repr__ = _swig_repr
    def iterator(self): return _voyager.DoubleArray_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _voyager.DoubleArray___nonzero__(self)
    def __bool__(self): return _voyager.DoubleArray___bool__(self)
    def __len__(self): return _voyager.DoubleArray___len__(self)
    def pop(self): return _voyager.DoubleArray_pop(self)
    def __getslice__(self, *args): return _voyager.DoubleArray___getslice__(self, *args)
    def __setslice__(self, *args): return _voyager.DoubleArray___setslice__(self, *args)
    def __delslice__(self, *args): return _voyager.DoubleArray___delslice__(self, *args)
    def __delitem__(self, *args): return _voyager.DoubleArray___delitem__(self, *args)
    def __getitem__(self, *args): return _voyager.DoubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _voyager.DoubleArray___setitem__(self, *args)
    def append(self, *args): return _voyager.DoubleArray_append(self, *args)
    def empty(self): return _voyager.DoubleArray_empty(self)
    def size(self): return _voyager.DoubleArray_size(self)
    def clear(self): return _voyager.DoubleArray_clear(self)
    def swap(self, *args): return _voyager.DoubleArray_swap(self, *args)
    def get_allocator(self): return _voyager.DoubleArray_get_allocator(self)
    def begin(self): return _voyager.DoubleArray_begin(self)
    def end(self): return _voyager.DoubleArray_end(self)
    def rbegin(self): return _voyager.DoubleArray_rbegin(self)
    def rend(self): return _voyager.DoubleArray_rend(self)
    def pop_back(self): return _voyager.DoubleArray_pop_back(self)
    def erase(self, *args): return _voyager.DoubleArray_erase(self, *args)
    def __init__(self, *args): 
        this = _voyager.new_DoubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _voyager.DoubleArray_push_back(self, *args)
    def front(self): return _voyager.DoubleArray_front(self)
    def back(self): return _voyager.DoubleArray_back(self)
    def assign(self, *args): return _voyager.DoubleArray_assign(self, *args)
    def resize(self, *args): return _voyager.DoubleArray_resize(self, *args)
    def insert(self, *args): return _voyager.DoubleArray_insert(self, *args)
    def reserve(self, *args): return _voyager.DoubleArray_reserve(self, *args)
    def capacity(self): return _voyager.DoubleArray_capacity(self)
    __swig_destroy__ = _voyager.delete_DoubleArray
    __del__ = lambda self : None;
DoubleArray_swigregister = _voyager.DoubleArray_swigregister
DoubleArray_swigregister(DoubleArray)

class ColorArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorArray, name)
    __repr__ = _swig_repr
    def iterator(self): return _voyager.ColorArray_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _voyager.ColorArray___nonzero__(self)
    def __bool__(self): return _voyager.ColorArray___bool__(self)
    def __len__(self): return _voyager.ColorArray___len__(self)
    def pop(self): return _voyager.ColorArray_pop(self)
    def __getslice__(self, *args): return _voyager.ColorArray___getslice__(self, *args)
    def __setslice__(self, *args): return _voyager.ColorArray___setslice__(self, *args)
    def __delslice__(self, *args): return _voyager.ColorArray___delslice__(self, *args)
    def __delitem__(self, *args): return _voyager.ColorArray___delitem__(self, *args)
    def __getitem__(self, *args): return _voyager.ColorArray___getitem__(self, *args)
    def __setitem__(self, *args): return _voyager.ColorArray___setitem__(self, *args)
    def append(self, *args): return _voyager.ColorArray_append(self, *args)
    def empty(self): return _voyager.ColorArray_empty(self)
    def size(self): return _voyager.ColorArray_size(self)
    def clear(self): return _voyager.ColorArray_clear(self)
    def swap(self, *args): return _voyager.ColorArray_swap(self, *args)
    def get_allocator(self): return _voyager.ColorArray_get_allocator(self)
    def begin(self): return _voyager.ColorArray_begin(self)
    def end(self): return _voyager.ColorArray_end(self)
    def rbegin(self): return _voyager.ColorArray_rbegin(self)
    def rend(self): return _voyager.ColorArray_rend(self)
    def pop_back(self): return _voyager.ColorArray_pop_back(self)
    def erase(self, *args): return _voyager.ColorArray_erase(self, *args)
    def __init__(self, *args): 
        this = _voyager.new_ColorArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _voyager.ColorArray_push_back(self, *args)
    def front(self): return _voyager.ColorArray_front(self)
    def back(self): return _voyager.ColorArray_back(self)
    def assign(self, *args): return _voyager.ColorArray_assign(self, *args)
    def resize(self, *args): return _voyager.ColorArray_resize(self, *args)
    def insert(self, *args): return _voyager.ColorArray_insert(self, *args)
    def reserve(self, *args): return _voyager.ColorArray_reserve(self, *args)
    def capacity(self): return _voyager.ColorArray_capacity(self)
    __swig_destroy__ = _voyager.delete_ColorArray
    __del__ = lambda self : None;
ColorArray_swigregister = _voyager.ColorArray_swigregister
ColorArray_swigregister(ColorArray)

class FloatVolumeArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVolumeArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVolumeArray, name)
    __repr__ = _swig_repr
    def iterator(self): return _voyager.FloatVolumeArray_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _voyager.FloatVolumeArray___nonzero__(self)
    def __bool__(self): return _voyager.FloatVolumeArray___bool__(self)
    def __len__(self): return _voyager.FloatVolumeArray___len__(self)
    def pop(self): return _voyager.FloatVolumeArray_pop(self)
    def __getslice__(self, *args): return _voyager.FloatVolumeArray___getslice__(self, *args)
    def __setslice__(self, *args): return _voyager.FloatVolumeArray___setslice__(self, *args)
    def __delslice__(self, *args): return _voyager.FloatVolumeArray___delslice__(self, *args)
    def __delitem__(self, *args): return _voyager.FloatVolumeArray___delitem__(self, *args)
    def __getitem__(self, *args): return _voyager.FloatVolumeArray___getitem__(self, *args)
    def __setitem__(self, *args): return _voyager.FloatVolumeArray___setitem__(self, *args)
    def append(self, *args): return _voyager.FloatVolumeArray_append(self, *args)
    def empty(self): return _voyager.FloatVolumeArray_empty(self)
    def size(self): return _voyager.FloatVolumeArray_size(self)
    def clear(self): return _voyager.FloatVolumeArray_clear(self)
    def swap(self, *args): return _voyager.FloatVolumeArray_swap(self, *args)
    def get_allocator(self): return _voyager.FloatVolumeArray_get_allocator(self)
    def begin(self): return _voyager.FloatVolumeArray_begin(self)
    def end(self): return _voyager.FloatVolumeArray_end(self)
    def rbegin(self): return _voyager.FloatVolumeArray_rbegin(self)
    def rend(self): return _voyager.FloatVolumeArray_rend(self)
    def pop_back(self): return _voyager.FloatVolumeArray_pop_back(self)
    def erase(self, *args): return _voyager.FloatVolumeArray_erase(self, *args)
    def __init__(self, *args): 
        this = _voyager.new_FloatVolumeArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _voyager.FloatVolumeArray_push_back(self, *args)
    def front(self): return _voyager.FloatVolumeArray_front(self)
    def back(self): return _voyager.FloatVolumeArray_back(self)
    def assign(self, *args): return _voyager.FloatVolumeArray_assign(self, *args)
    def resize(self, *args): return _voyager.FloatVolumeArray_resize(self, *args)
    def insert(self, *args): return _voyager.FloatVolumeArray_insert(self, *args)
    def reserve(self, *args): return _voyager.FloatVolumeArray_reserve(self, *args)
    def capacity(self): return _voyager.FloatVolumeArray_capacity(self)
    __swig_destroy__ = _voyager.delete_FloatVolumeArray
    __del__ = lambda self : None;
FloatVolumeArray_swigregister = _voyager.FloatVolumeArray_swigregister
FloatVolumeArray_swigregister(FloatVolumeArray)

class ColorVolumeArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorVolumeArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorVolumeArray, name)
    __repr__ = _swig_repr
    def iterator(self): return _voyager.ColorVolumeArray_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _voyager.ColorVolumeArray___nonzero__(self)
    def __bool__(self): return _voyager.ColorVolumeArray___bool__(self)
    def __len__(self): return _voyager.ColorVolumeArray___len__(self)
    def pop(self): return _voyager.ColorVolumeArray_pop(self)
    def __getslice__(self, *args): return _voyager.ColorVolumeArray___getslice__(self, *args)
    def __setslice__(self, *args): return _voyager.ColorVolumeArray___setslice__(self, *args)
    def __delslice__(self, *args): return _voyager.ColorVolumeArray___delslice__(self, *args)
    def __delitem__(self, *args): return _voyager.ColorVolumeArray___delitem__(self, *args)
    def __getitem__(self, *args): return _voyager.ColorVolumeArray___getitem__(self, *args)
    def __setitem__(self, *args): return _voyager.ColorVolumeArray___setitem__(self, *args)
    def append(self, *args): return _voyager.ColorVolumeArray_append(self, *args)
    def empty(self): return _voyager.ColorVolumeArray_empty(self)
    def size(self): return _voyager.ColorVolumeArray_size(self)
    def clear(self): return _voyager.ColorVolumeArray_clear(self)
    def swap(self, *args): return _voyager.ColorVolumeArray_swap(self, *args)
    def get_allocator(self): return _voyager.ColorVolumeArray_get_allocator(self)
    def begin(self): return _voyager.ColorVolumeArray_begin(self)
    def end(self): return _voyager.ColorVolumeArray_end(self)
    def rbegin(self): return _voyager.ColorVolumeArray_rbegin(self)
    def rend(self): return _voyager.ColorVolumeArray_rend(self)
    def pop_back(self): return _voyager.ColorVolumeArray_pop_back(self)
    def erase(self, *args): return _voyager.ColorVolumeArray_erase(self, *args)
    def __init__(self, *args): 
        this = _voyager.new_ColorVolumeArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _voyager.ColorVolumeArray_push_back(self, *args)
    def front(self): return _voyager.ColorVolumeArray_front(self)
    def back(self): return _voyager.ColorVolumeArray_back(self)
    def assign(self, *args): return _voyager.ColorVolumeArray_assign(self, *args)
    def resize(self, *args): return _voyager.ColorVolumeArray_resize(self, *args)
    def insert(self, *args): return _voyager.ColorVolumeArray_insert(self, *args)
    def reserve(self, *args): return _voyager.ColorVolumeArray_reserve(self, *args)
    def capacity(self): return _voyager.ColorVolumeArray_capacity(self)
    __swig_destroy__ = _voyager.delete_ColorVolumeArray
    __del__ = lambda self : None;
ColorVolumeArray_swigregister = _voyager.ColorVolumeArray_swigregister
ColorVolumeArray_swigregister(ColorVolumeArray)

class BoundingBoxArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBoxArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBoxArray, name)
    __repr__ = _swig_repr
    def iterator(self): return _voyager.BoundingBoxArray_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _voyager.BoundingBoxArray___nonzero__(self)
    def __bool__(self): return _voyager.BoundingBoxArray___bool__(self)
    def __len__(self): return _voyager.BoundingBoxArray___len__(self)
    def pop(self): return _voyager.BoundingBoxArray_pop(self)
    def __getslice__(self, *args): return _voyager.BoundingBoxArray___getslice__(self, *args)
    def __setslice__(self, *args): return _voyager.BoundingBoxArray___setslice__(self, *args)
    def __delslice__(self, *args): return _voyager.BoundingBoxArray___delslice__(self, *args)
    def __delitem__(self, *args): return _voyager.BoundingBoxArray___delitem__(self, *args)
    def __getitem__(self, *args): return _voyager.BoundingBoxArray___getitem__(self, *args)
    def __setitem__(self, *args): return _voyager.BoundingBoxArray___setitem__(self, *args)
    def append(self, *args): return _voyager.BoundingBoxArray_append(self, *args)
    def empty(self): return _voyager.BoundingBoxArray_empty(self)
    def size(self): return _voyager.BoundingBoxArray_size(self)
    def clear(self): return _voyager.BoundingBoxArray_clear(self)
    def swap(self, *args): return _voyager.BoundingBoxArray_swap(self, *args)
    def get_allocator(self): return _voyager.BoundingBoxArray_get_allocator(self)
    def begin(self): return _voyager.BoundingBoxArray_begin(self)
    def end(self): return _voyager.BoundingBoxArray_end(self)
    def rbegin(self): return _voyager.BoundingBoxArray_rbegin(self)
    def rend(self): return _voyager.BoundingBoxArray_rend(self)
    def pop_back(self): return _voyager.BoundingBoxArray_pop_back(self)
    def erase(self, *args): return _voyager.BoundingBoxArray_erase(self, *args)
    def __init__(self, *args): 
        this = _voyager.new_BoundingBoxArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _voyager.BoundingBoxArray_push_back(self, *args)
    def front(self): return _voyager.BoundingBoxArray_front(self)
    def back(self): return _voyager.BoundingBoxArray_back(self)
    def assign(self, *args): return _voyager.BoundingBoxArray_assign(self, *args)
    def resize(self, *args): return _voyager.BoundingBoxArray_resize(self, *args)
    def insert(self, *args): return _voyager.BoundingBoxArray_insert(self, *args)
    def reserve(self, *args): return _voyager.BoundingBoxArray_reserve(self, *args)
    def capacity(self): return _voyager.BoundingBoxArray_capacity(self)
    __swig_destroy__ = _voyager.delete_BoundingBoxArray
    __del__ = lambda self : None;
BoundingBoxArray_swigregister = _voyager.BoundingBoxArray_swigregister
BoundingBoxArray_swigregister(BoundingBoxArray)

class SceneManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SceneManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SceneManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SceneManager
    __del__ = lambda self : None;
    def setFrameRange(self, *args): return _voyager.SceneManager_setFrameRange(self, *args)
    def setResolution(self, *args): return _voyager.SceneManager_setResolution(self, *args)
    def rayMarch(self, *args): return _voyager.SceneManager_rayMarch(self, *args)
    def rayMarchLightScatter(self, *args): return _voyager.SceneManager_rayMarchLightScatter(self, *args)
    def rayMarchDSM(self, *args): return _voyager.SceneManager_rayMarchDSM(self, *args)
    def renderImage(self, *args): return _voyager.SceneManager_renderImage(self, *args)
    def getAnnotation(self): return _voyager.SceneManager_getAnnotation(self)
    __swig_setmethods__["lights"] = _voyager.SceneManager_lights_set
    __swig_getmethods__["lights"] = _voyager.SceneManager_lights_get
    if _newclass:lights = _swig_property(_voyager.SceneManager_lights_get, _voyager.SceneManager_lights_set)
    def pushLight(self, *args): return _voyager.SceneManager_pushLight(self, *args)
    def clearLights(self): return _voyager.SceneManager_clearLights(self)
    __swig_setmethods__["lightGrids"] = _voyager.SceneManager_lightGrids_set
    __swig_getmethods__["lightGrids"] = _voyager.SceneManager_lightGrids_get
    if _newclass:lightGrids = _swig_property(_voyager.SceneManager_lightGrids_get, _voyager.SceneManager_lightGrids_set)
    def pushDSM(self, *args): return _voyager.SceneManager_pushDSM(self, *args)
    def clearDSMs(self): return _voyager.SceneManager_clearDSMs(self)
    __swig_setmethods__["volumes"] = _voyager.SceneManager_volumes_set
    __swig_getmethods__["volumes"] = _voyager.SceneManager_volumes_get
    if _newclass:volumes = _swig_property(_voyager.SceneManager_volumes_get, _voyager.SceneManager_volumes_set)
    def pushFloatVolume(self, *args): return _voyager.SceneManager_pushFloatVolume(self, *args)
    def clearFloatVolumes(self): return _voyager.SceneManager_clearFloatVolumes(self)
    __swig_setmethods__["colorVolumes"] = _voyager.SceneManager_colorVolumes_set
    __swig_getmethods__["colorVolumes"] = _voyager.SceneManager_colorVolumes_get
    if _newclass:colorVolumes = _swig_property(_voyager.SceneManager_colorVolumes_get, _voyager.SceneManager_colorVolumes_set)
    def pushColorVolume(self, *args): return _voyager.SceneManager_pushColorVolume(self, *args)
    def clearColorVolumes(self): return _voyager.SceneManager_clearColorVolumes(self)
    __swig_setmethods__["boundingboxes"] = _voyager.SceneManager_boundingboxes_set
    __swig_getmethods__["boundingboxes"] = _voyager.SceneManager_boundingboxes_get
    if _newclass:boundingboxes = _swig_property(_voyager.SceneManager_boundingboxes_get, _voyager.SceneManager_boundingboxes_set)
    __swig_setmethods__["camera"] = _voyager.SceneManager_camera_set
    __swig_getmethods__["camera"] = _voyager.SceneManager_camera_get
    if _newclass:camera = _swig_property(_voyager.SceneManager_camera_get, _voyager.SceneManager_camera_set)
    __swig_setmethods__["WRITE_RENDER_LOG"] = _voyager.SceneManager_WRITE_RENDER_LOG_set
    __swig_getmethods__["WRITE_RENDER_LOG"] = _voyager.SceneManager_WRITE_RENDER_LOG_get
    if _newclass:WRITE_RENDER_LOG = _swig_property(_voyager.SceneManager_WRITE_RENDER_LOG_get, _voyager.SceneManager_WRITE_RENDER_LOG_set)
    __swig_setmethods__["WRITE_RENDER_ANNOTATION"] = _voyager.SceneManager_WRITE_RENDER_ANNOTATION_set
    __swig_getmethods__["WRITE_RENDER_ANNOTATION"] = _voyager.SceneManager_WRITE_RENDER_ANNOTATION_get
    if _newclass:WRITE_RENDER_ANNOTATION = _swig_property(_voyager.SceneManager_WRITE_RENDER_ANNOTATION_get, _voyager.SceneManager_WRITE_RENDER_ANNOTATION_set)
    __swig_setmethods__["ENABLE_LIGHTS"] = _voyager.SceneManager_ENABLE_LIGHTS_set
    __swig_getmethods__["ENABLE_LIGHTS"] = _voyager.SceneManager_ENABLE_LIGHTS_get
    if _newclass:ENABLE_LIGHTS = _swig_property(_voyager.SceneManager_ENABLE_LIGHTS_get, _voyager.SceneManager_ENABLE_LIGHTS_set)
    __swig_setmethods__["ENABLE_DSM"] = _voyager.SceneManager_ENABLE_DSM_set
    __swig_getmethods__["ENABLE_DSM"] = _voyager.SceneManager_ENABLE_DSM_get
    if _newclass:ENABLE_DSM = _swig_property(_voyager.SceneManager_ENABLE_DSM_get, _voyager.SceneManager_ENABLE_DSM_set)
    __swig_setmethods__["UNION_COLLISIONS"] = _voyager.SceneManager_UNION_COLLISIONS_set
    __swig_getmethods__["UNION_COLLISIONS"] = _voyager.SceneManager_UNION_COLLISIONS_get
    if _newclass:UNION_COLLISIONS = _swig_property(_voyager.SceneManager_UNION_COLLISIONS_get, _voyager.SceneManager_UNION_COLLISIONS_set)
    __swig_setmethods__["ADD_COLLISIONS"] = _voyager.SceneManager_ADD_COLLISIONS_set
    __swig_getmethods__["ADD_COLLISIONS"] = _voyager.SceneManager_ADD_COLLISIONS_get
    if _newclass:ADD_COLLISIONS = _swig_property(_voyager.SceneManager_ADD_COLLISIONS_get, _voyager.SceneManager_ADD_COLLISIONS_set)
    __swig_setmethods__["K"] = _voyager.SceneManager_K_set
    __swig_getmethods__["K"] = _voyager.SceneManager_K_get
    if _newclass:K = _swig_property(_voyager.SceneManager_K_get, _voyager.SceneManager_K_set)
    __swig_setmethods__["emissive"] = _voyager.SceneManager_emissive_set
    __swig_getmethods__["emissive"] = _voyager.SceneManager_emissive_get
    if _newclass:emissive = _swig_property(_voyager.SceneManager_emissive_get, _voyager.SceneManager_emissive_set)
    __swig_setmethods__["marchStep"] = _voyager.SceneManager_marchStep_set
    __swig_getmethods__["marchStep"] = _voyager.SceneManager_marchStep_get
    if _newclass:marchStep = _swig_property(_voyager.SceneManager_marchStep_get, _voyager.SceneManager_marchStep_set)
    __swig_setmethods__["lightMarchStep"] = _voyager.SceneManager_lightMarchStep_set
    __swig_getmethods__["lightMarchStep"] = _voyager.SceneManager_lightMarchStep_get
    if _newclass:lightMarchStep = _swig_property(_voyager.SceneManager_lightMarchStep_get, _voyager.SceneManager_lightMarchStep_set)
    __swig_setmethods__["renderlog"] = _voyager.SceneManager_renderlog_set
    __swig_getmethods__["renderlog"] = _voyager.SceneManager_renderlog_get
    if _newclass:renderlog = _swig_property(_voyager.SceneManager_renderlog_get, _voyager.SceneManager_renderlog_set)
SceneManager_swigregister = _voyager.SceneManager_swigregister
SceneManager_swigregister(SceneManager)

# This file is compatible with both classic and new-style classes.


