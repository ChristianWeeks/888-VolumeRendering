# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_voyager', [dirname(__file__)])
        except ImportError:
            import _voyager
            return _voyager
        if fp is not None:
            try:
                _mod = imp.load_module('_voyager', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _voyager = swig_import_helper()
    del swig_import_helper
else:
    import _voyager
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _voyager.SHARED_PTR_DISOWN
class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Vector
    __del__ = lambda self : None;
    def set(self, *args): return _voyager.Vector_set(self, *args)
    def __add__(self, *args): return _voyager.Vector___add__(self, *args)
    def __sub__(self, *args): return _voyager.Vector___sub__(self, *args)
    def __div__(self, *args): return _voyager.Vector___div__(self, *args)
    def __mul__(self, *args): return _voyager.Vector___mul__(self, *args)
    def __xor__(self, *args): return _voyager.Vector___xor__(self, *args)
    def __iadd__(self, *args): return _voyager.Vector___iadd__(self, *args)
    def __isub__(self, *args): return _voyager.Vector___isub__(self, *args)
    def __imul__(self, *args): return _voyager.Vector___imul__(self, *args)
    def __idiv__(self, *args): return _voyager.Vector___idiv__(self, *args)
    def __call__(self, *args): return _voyager.Vector___call__(self, *args)
    def X(self): return _voyager.Vector_X(self)
    def Y(self): return _voyager.Vector_Y(self)
    def Z(self): return _voyager.Vector_Z(self)
    def magnitude(self): return _voyager.Vector_magnitude(self)
    def unitvector(self): return _voyager.Vector_unitvector(self)
    def normalize(self): return _voyager.Vector_normalize(self)
    def __eq__(self, *args): return _voyager.Vector___eq__(self, *args)
    def __ne__(self, *args): return _voyager.Vector___ne__(self, *args)
    def __lt__(self, *args): return _voyager.Vector___lt__(self, *args)
    def __le__(self, *args): return _voyager.Vector___le__(self, *args)
    def __gt__(self, *args): return _voyager.Vector___gt__(self, *args)
    def __ge__(self, *args): return _voyager.Vector___ge__(self, *args)
Vector_swigregister = _voyager.Vector_swigregister
Vector_swigregister(Vector)

class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_Matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Matrix
    __del__ = lambda self : None;
    def __call__(self, *args): return _voyager.Matrix___call__(self, *args)
    def __add__(self, *args): return _voyager.Matrix___add__(self, *args)
    def __sub__(self, *args): return _voyager.Matrix___sub__(self, *args)
    def __div__(self, *args): return _voyager.Matrix___div__(self, *args)
    def __mul__(self, *args): return _voyager.Matrix___mul__(self, *args)
    def __iadd__(self, *args): return _voyager.Matrix___iadd__(self, *args)
    def __isub__(self, *args): return _voyager.Matrix___isub__(self, *args)
    def __imul__(self, *args): return _voyager.Matrix___imul__(self, *args)
    def __idiv__(self, *args): return _voyager.Matrix___idiv__(self, *args)
    def __eq__(self, *args): return _voyager.Matrix___eq__(self, *args)
    def __ne__(self, *args): return _voyager.Matrix___ne__(self, *args)
    def __lt__(self, *args): return _voyager.Matrix___lt__(self, *args)
    def __le__(self, *args): return _voyager.Matrix___le__(self, *args)
    def __gt__(self, *args): return _voyager.Matrix___gt__(self, *args)
    def __ge__(self, *args): return _voyager.Matrix___ge__(self, *args)
    def inverse(self): return _voyager.Matrix_inverse(self)
    def transpose(self): return _voyager.Matrix_transpose(self)
    def det(self): return _voyager.Matrix_det(self)
    def trace(self): return _voyager.Matrix_trace(self)
    def exp(self): return _voyager.Matrix_exp(self)
    def Get(self, *args): return _voyager.Matrix_Get(self, *args)
    def Set(self, *args): return _voyager.Matrix_Set(self, *args)
Matrix_swigregister = _voyager.Matrix_swigregister
Matrix_swigregister(Matrix)


def __sub__(*args):
  return _voyager.__sub__(*args)
__sub__ = _voyager.__sub__

def __mul__(*args):
  return _voyager.__mul__(*args)
__mul__ = _voyager.__mul__
class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Color
    __del__ = lambda self : None;
    def set(self, *args): return _voyager.Color_set(self, *args)
    def clamp(self): return _voyager.Color_clamp(self)
    def __add__(self, *args): return _voyager.Color___add__(self, *args)
    def __sub__(self, *args): return _voyager.Color___sub__(self, *args)
    def __div__(self, *args): return _voyager.Color___div__(self, *args)
    def __mul__(self, *args): return _voyager.Color___mul__(self, *args)
    def __iadd__(self, *args): return _voyager.Color___iadd__(self, *args)
    def __isub__(self, *args): return _voyager.Color___isub__(self, *args)
    def __imul__(self, *args): return _voyager.Color___imul__(self, *args)
    def __idiv__(self, *args): return _voyager.Color___idiv__(self, *args)
    def __call__(self, *args): return _voyager.Color___call__(self, *args)
    def X(self): return _voyager.Color_X(self)
    def Y(self): return _voyager.Color_Y(self)
    def Z(self): return _voyager.Color_Z(self)
    def W(self): return _voyager.Color_W(self)
    def __eq__(self, *args): return _voyager.Color___eq__(self, *args)
    def __ne__(self, *args): return _voyager.Color___ne__(self, *args)
Color_swigregister = _voyager.Color_swigregister
Color_swigregister(Color)


def __lshift__(*args):
  return _voyager.__lshift__(*args)
__lshift__ = _voyager.__lshift__
class Camera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _voyager.new_Camera()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_Camera
    __del__ = lambda self : None;
    def setEyeViewUp(self, *args): return _voyager.Camera_setEyeViewUp(self, *args)
    def eye(self): return _voyager.Camera_eye(self)
    def up(self): return _voyager.Camera_up(self)
    def view(self, *args): return _voyager.Camera_view(self, *args)
    def setFov(self, *args): return _voyager.Camera_setFov(self, *args)
    def fov(self): return _voyager.Camera_fov(self)
    def setAspectRatio(self, *args): return _voyager.Camera_setAspectRatio(self, *args)
    def aspectRatio(self): return _voyager.Camera_aspectRatio(self)
    def setNearPlane(self, *args): return _voyager.Camera_setNearPlane(self, *args)
    def nearPlane(self): return _voyager.Camera_nearPlane(self)
    def setFarPlane(self, *args): return _voyager.Camera_setFarPlane(self, *args)
    def farPlane(self): return _voyager.Camera_farPlane(self)
Camera_swigregister = _voyager.Camera_swigregister
Camera_swigregister(Camera)


def octave_noise_2d(*args):
  return _voyager.octave_noise_2d(*args)
octave_noise_2d = _voyager.octave_noise_2d

def octave_noise_3d(*args):
  return _voyager.octave_noise_3d(*args)
octave_noise_3d = _voyager.octave_noise_3d

def octave_noise_4d(*args):
  return _voyager.octave_noise_4d(*args)
octave_noise_4d = _voyager.octave_noise_4d

def scaled_octave_noise_2d(*args):
  return _voyager.scaled_octave_noise_2d(*args)
scaled_octave_noise_2d = _voyager.scaled_octave_noise_2d

def scaled_octave_noise_3d(*args):
  return _voyager.scaled_octave_noise_3d(*args)
scaled_octave_noise_3d = _voyager.scaled_octave_noise_3d

def scaled_octave_noise_4d(*args):
  return _voyager.scaled_octave_noise_4d(*args)
scaled_octave_noise_4d = _voyager.scaled_octave_noise_4d

def scaled_raw_noise_2d(*args):
  return _voyager.scaled_raw_noise_2d(*args)
scaled_raw_noise_2d = _voyager.scaled_raw_noise_2d

def scaled_raw_noise_3d(*args):
  return _voyager.scaled_raw_noise_3d(*args)
scaled_raw_noise_3d = _voyager.scaled_raw_noise_3d

def scaled_raw_noise_4d(*args):
  return _voyager.scaled_raw_noise_4d(*args)
scaled_raw_noise_4d = _voyager.scaled_raw_noise_4d

def raw_noise_2d(*args):
  return _voyager.raw_noise_2d(*args)
raw_noise_2d = _voyager.raw_noise_2d

def raw_noise_3d(*args):
  return _voyager.raw_noise_3d(*args)
raw_noise_3d = _voyager.raw_noise_3d

def raw_noise_4d(*args):
  return _voyager.raw_noise_4d(*args)
raw_noise_4d = _voyager.raw_noise_4d

def fastfloor(*args):
  return _voyager.fastfloor(*args)
fastfloor = _voyager.fastfloor

def dot(*args):
  return _voyager.dot(*args)
dot = _voyager.dot
class SimplexNoiseObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimplexNoiseObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimplexNoiseObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SimplexNoiseObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SimplexNoiseObject
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.SimplexNoiseObject_eval(self, *args)
    def getAnnotation(self): return _voyager.SimplexNoiseObject_getAnnotation(self)
SimplexNoiseObject_swigregister = _voyager.SimplexNoiseObject_swigregister
SimplexNoiseObject_swigregister(SimplexNoiseObject)
cvar = _voyager.cvar
grad3 = cvar.grad3
grad4 = cvar.grad4
perm = cvar.perm
simplex = cvar.simplex

class FloatVolumeBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVolumeBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVolumeBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_FloatVolumeBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_FloatVolumeBase
    __del__ = lambda self : None;
FloatVolumeBase_swigregister = _voyager.FloatVolumeBase_swigregister
FloatVolumeBase_swigregister(FloatVolumeBase)

class VectorVolumeBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVolumeBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVolumeBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_VectorVolumeBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_VectorVolumeBase
    __del__ = lambda self : None;
VectorVolumeBase_swigregister = _voyager.VectorVolumeBase_swigregister
VectorVolumeBase_swigregister(VectorVolumeBase)

class ColorVolumeBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorVolumeBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorVolumeBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_ColorVolumeBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_ColorVolumeBase
    __del__ = lambda self : None;
ColorVolumeBase_swigregister = _voyager.ColorVolumeBase_swigregister
ColorVolumeBase_swigregister(ColorVolumeBase)

class SphereVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphereVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SphereVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SphereVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SphereVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.SphereVolume_eval(self, *args)
    def grad(self, *args): return _voyager.SphereVolume_grad(self, *args)
SphereVolume_swigregister = _voyager.SphereVolume_swigregister
SphereVolume_swigregister(SphereVolume)

class PyroSphereVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyroSphereVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyroSphereVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_PyroSphereVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_PyroSphereVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.PyroSphereVolume_eval(self, *args)
    def grad(self, *args): return _voyager.PyroSphereVolume_grad(self, *args)
PyroSphereVolume_swigregister = _voyager.PyroSphereVolume_swigregister
PyroSphereVolume_swigregister(PyroSphereVolume)

class SimplexNoiseVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimplexNoiseVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimplexNoiseVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SimplexNoiseVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SimplexNoiseVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.SimplexNoiseVolume_eval(self, *args)
    def grad(self, *args): return _voyager.SimplexNoiseVolume_grad(self, *args)
SimplexNoiseVolume_swigregister = _voyager.SimplexNoiseVolume_swigregister
SimplexNoiseVolume_swigregister(SimplexNoiseVolume)

class SimplexNoiseVectorVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimplexNoiseVectorVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimplexNoiseVectorVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SimplexNoiseVectorVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SimplexNoiseVectorVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.SimplexNoiseVectorVolume_eval(self, *args)
    def grad(self, *args): return _voyager.SimplexNoiseVectorVolume_grad(self, *args)
SimplexNoiseVectorVolume_swigregister = _voyager.SimplexNoiseVectorVolume_swigregister
SimplexNoiseVectorVolume_swigregister(SimplexNoiseVectorVolume)

class SimplexNoiseColorVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimplexNoiseColorVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimplexNoiseColorVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_SimplexNoiseColorVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_SimplexNoiseColorVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.SimplexNoiseColorVolume_eval(self, *args)
    def grad(self, *args): return _voyager.SimplexNoiseColorVolume_grad(self, *args)
SimplexNoiseColorVolume_swigregister = _voyager.SimplexNoiseColorVolume_swigregister
SimplexNoiseColorVolume_swigregister(SimplexNoiseColorVolume)

class BoxVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoxVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_BoxVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_BoxVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.BoxVolume_eval(self, *args)
    def grad(self, *args): return _voyager.BoxVolume_grad(self, *args)
BoxVolume_swigregister = _voyager.BoxVolume_swigregister
BoxVolume_swigregister(BoxVolume)

class CylinderVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CylinderVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CylinderVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_CylinderVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_CylinderVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.CylinderVolume_eval(self, *args)
    def grad(self, *args): return _voyager.CylinderVolume_grad(self, *args)
CylinderVolume_swigregister = _voyager.CylinderVolume_swigregister
CylinderVolume_swigregister(CylinderVolume)

class PlaneVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlaneVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlaneVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_PlaneVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_PlaneVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.PlaneVolume_eval(self, *args)
    def grad(self, *args): return _voyager.PlaneVolume_grad(self, *args)
PlaneVolume_swigregister = _voyager.PlaneVolume_swigregister
PlaneVolume_swigregister(PlaneVolume)

class ConeVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConeVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConeVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _voyager.new_ConeVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _voyager.delete_ConeVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _voyager.ConeVolume_eval(self, *args)
    def grad(self, *args): return _voyager.ConeVolume_grad(self, *args)
ConeVolume_swigregister = _voyager.ConeVolume_swigregister
ConeVolume_swigregister(ConeVolume)

# This file is compatible with both classic and new-style classes.


