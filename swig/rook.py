# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rook', [dirname(__file__)])
        except ImportError:
            import _rook
            return _rook
        if fp is not None:
            try:
                _mod = imp.load_module('_rook', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rook = swig_import_helper()
    del swig_import_helper
else:
    import _rook
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _rook.SHARED_PTR_DISOWN
class Mult_SV_Volume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mult_SV_Volume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mult_SV_Volume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rook.new_Mult_SV_Volume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rook.delete_Mult_SV_Volume
    __del__ = lambda self : None;
    def eval(self, *args): return _rook.Mult_SV_Volume_eval(self, *args)
    def grad(self, *args): return _rook.Mult_SV_Volume_grad(self, *args)
Mult_SV_Volume_swigregister = _rook.Mult_SV_Volume_swigregister
Mult_SV_Volume_swigregister(Mult_SV_Volume)

class DivideVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DivideVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DivideVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rook.new_DivideVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rook.delete_DivideVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _rook.DivideVolume_eval(self, *args)
    def grad(self, *args): return _rook.DivideVolume_grad(self, *args)
DivideVolume_swigregister = _rook.DivideVolume_swigregister
DivideVolume_swigregister(DivideVolume)

class Divide_SV_Volume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Divide_SV_Volume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Divide_SV_Volume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rook.new_Divide_SV_Volume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rook.delete_Divide_SV_Volume
    __del__ = lambda self : None;
    def eval(self, *args): return _rook.Divide_SV_Volume_eval(self, *args)
    def grad(self, *args): return _rook.Divide_SV_Volume_grad(self, *args)
Divide_SV_Volume_swigregister = _rook.Divide_SV_Volume_swigregister
Divide_SV_Volume_swigregister(Divide_SV_Volume)

class SinVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SinVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SinVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rook.new_SinVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rook.delete_SinVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _rook.SinVolume_eval(self, *args)
    def grad(self, *args): return _rook.SinVolume_grad(self, *args)
SinVolume_swigregister = _rook.SinVolume_swigregister
SinVolume_swigregister(SinVolume)

class CosVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CosVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CosVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rook.new_CosVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rook.delete_CosVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _rook.CosVolume_eval(self, *args)
    def grad(self, *args): return _rook.CosVolume_grad(self, *args)
CosVolume_swigregister = _rook.CosVolume_swigregister
CosVolume_swigregister(CosVolume)

class DotProductVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DotProductVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DotProductVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rook.new_DotProductVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rook.delete_DotProductVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _rook.DotProductVolume_eval(self, *args)
    def grad(self, *args): return _rook.DotProductVolume_grad(self, *args)
DotProductVolume_swigregister = _rook.DotProductVolume_swigregister
DotProductVolume_swigregister(DotProductVolume)

class CrossProductVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossProductVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CrossProductVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rook.new_CrossProductVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rook.delete_CrossProductVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _rook.CrossProductVolume_eval(self, *args)
    def grad(self, *args): return _rook.CrossProductVolume_grad(self, *args)
CrossProductVolume_swigregister = _rook.CrossProductVolume_swigregister
CrossProductVolume_swigregister(CrossProductVolume)

class Scale_S_Volume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scale_S_Volume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scale_S_Volume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rook.new_Scale_S_Volume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rook.delete_Scale_S_Volume
    __del__ = lambda self : None;
    def eval(self, *args): return _rook.Scale_S_Volume_eval(self, *args)
    def grad(self, *args): return _rook.Scale_S_Volume_grad(self, *args)
Scale_S_Volume_swigregister = _rook.Scale_S_Volume_swigregister
Scale_S_Volume_swigregister(Scale_S_Volume)

class Scale_V_Volume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scale_V_Volume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scale_V_Volume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rook.new_Scale_V_Volume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rook.delete_Scale_V_Volume
    __del__ = lambda self : None;
    def eval(self, *args): return _rook.Scale_V_Volume_eval(self, *args)
    def grad(self, *args): return _rook.Scale_V_Volume_grad(self, *args)
Scale_V_Volume_swigregister = _rook.Scale_V_Volume_swigregister
Scale_V_Volume_swigregister(Scale_V_Volume)

class Scale_M_Volume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scale_M_Volume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scale_M_Volume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rook.new_Scale_M_Volume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rook.delete_Scale_M_Volume
    __del__ = lambda self : None;
    def eval(self, *args): return _rook.Scale_M_Volume_eval(self, *args)
    def grad(self, *args): return _rook.Scale_M_Volume_grad(self, *args)
Scale_M_Volume_swigregister = _rook.Scale_M_Volume_swigregister
Scale_M_Volume_swigregister(Scale_M_Volume)

class floatVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatVolume, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _rook.new_floatVolume()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rook.delete_floatVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _rook.floatVolume_eval(self, *args)
    def grad(self, *args): return _rook.floatVolume_grad(self, *args)
floatVolume_swigregister = _rook.floatVolume_swigregister
floatVolume_swigregister(floatVolume)

class vectorVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVolume, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _rook.new_vectorVolume()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rook.delete_vectorVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _rook.vectorVolume_eval(self, *args)
    def grad(self, *args): return _rook.vectorVolume_grad(self, *args)
vectorVolume_swigregister = _rook.vectorVolume_swigregister
vectorVolume_swigregister(vectorVolume)

class MultVolumeFloat(floatVolume):
    __swig_setmethods__ = {}
    for _s in [floatVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultVolumeFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [floatVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultVolumeFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rook.new_MultVolumeFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rook.delete_MultVolumeFloat
    __del__ = lambda self : None;
    def eval(self, *args): return _rook.MultVolumeFloat_eval(self, *args)
    def grad(self, *args): return _rook.MultVolumeFloat_grad(self, *args)
MultVolumeFloat_swigregister = _rook.MultVolumeFloat_swigregister
MultVolumeFloat_swigregister(MultVolumeFloat)

# This file is compatible with both classic and new-style classes.


